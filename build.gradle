import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "java"
    id "architectury-plugin" version "+"
    id "de.undercouch.download" version "+"
    id "dev.architectury.loom" version "+" apply false
    id "com.github.johnrengelman.shadow" version "+" apply false
}

def default_minecraft_version = "1.16.5"
def minecraft_version = rootProject.properties.containsKey("buildVersion") ? rootProject.getProperties().get("buildVersion").toString() : default_minecraft_version
def minecraft_main_version = minecraft_version.split("\\.")[1] as int
def is_1_19_3 = minecraft_version == "1.19.3" || minecraft_version == "1.19.4"
def is_1_20_1 = minecraft_version == "1.20.1"

rootProject.ext.fabric_loader_version = [minecraft_version, getJson("https://meta.fabricmc.net/v2/versions/loader/" + minecraft_version)[0]["loader"]["version"]]
rootProject.ext.forge_version = minecraft_version + "-" + getJson("https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json")["promos"][minecraft_version + "-latest"]
rootProject.ext.fabric_api_data = getModrinthData("fabric", minecraft_version, "fabric-api")
rootProject.ext.mod_menu_data = getModrinthData("fabric", minecraft_version, "modmenu")
rootProject.ext.architectury_data = getModrinthData("forge", minecraft_version, "architectury-api")
rootProject.ext.architectury_id = minecraft_main_version == 16 ? "me.shedaniel" : "dev.architectury"

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "com.github.johnrengelman.shadow"

    loom {
        silentMojangMappingsLicense()
        mixin {
            defaultRefmapName.set("msd-refmap.json")
        }
    }

    configurations {
        shadowCommon
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.officialMojangMappings()
        implementation "org.msgpack:msgpack-core:+"
        implementation "com.github.jonafanho:Minecraft-Mod-API-Tools:${rootProject.minecraft_mod_api_tools_version}"
        implementation "org.codehaus.groovy:groovy-json:3.0.9"
        implementation files("../checkouts/mtr-common.jar")
        shadowCommon "org.msgpack:msgpack-core:+"
    }
}

tasks.register('setupLibrary') {
    doLast {
        String baseURL = is_1_20_1 ? "https://storage.zbx1425.cn/mtr-artifacts/libs/" : "https://www.minecrafttransitrailway.com/libs/"
        download.run {
            src "${baseURL}${rootProject.mtr_version}/MTR-common-${minecraft_version}-${rootProject.mtr_version}-dev.jar"
            dest "checkouts/mtr-common.jar"
            overwrite true
        }

        download.run {
            src "${baseURL}${rootProject.mtr_version}/MTR-fabric-${minecraft_version}-${rootProject.mtr_version}-dev-shadow.jar"
            dest "checkouts/mtr-fabric.jar"
            overwrite true
        }

        download.run {
            src "${baseURL}${rootProject.mtr_version}/MTR-forge-${minecraft_version}-${rootProject.mtr_version}-dev-shadow.jar"
            dest "checkouts/mtr-forge.jar"
            overwrite true
        }
    }
}

tasks.register("setupFiles") {
    System.out.println("Fabric Loader: " + rootProject.fabric_loader_version[1])
    System.out.println("Forge: " + rootProject.forge_version)
    System.out.println("Fabric API: " + rootProject.fabric_api_data[0])
    System.out.println("Mod Menu: " + rootProject.mod_menu_data[0])
    System.out.println("Architectury: " + rootProject.architectury_data[0].split("\\+")[0])

    String baseURL = is_1_20_1 ? "https://storage.zbx1425.cn/mtr-artifacts/Minecraft-Mappings/" : "https://github.com/jonafanho/Minecraft-Mappings/archive/refs/heads/"
    download.run {
        src "${baseURL}${is_1_19_3 ? minecraft_version : "1." + minecraft_main_version}.zip"
        dest "common/src/main/java/top/mcmtr/mappings/files.zip"
        overwrite true
        retries - 1
    }

    copy {
        outputs.upToDateWhen { false }
        from(zipTree("common/src/main/java/top/mcmtr/mappings/files.zip")) { eachFile { file -> file.relativePath = new RelativePath(true, file.relativePath.segments.drop(1) as String[]) } }
        into "common/src/main/java/top/mcmtr/mappings"
        filter(ReplaceTokens, tokens: ["package": "top.mcmtr.mappings; import mtr.mappings.*"])
    }

    ant.path { ant.fileset(dir: "common/src/main/java/top/mcmtr/mappings", includes: "Fabric*.java") }.list().each {
        ant.move(file: it, todir: "fabric/src/main/java/top/mcmtr/mappings")
    }

    ant.path { ant.fileset(dir: "common/src/main/java/top/mcmtr/mappings", includes: "Forge*.java") }.list().each {
        ant.move(file: it, todir: "forge/src/main/java/top/mcmtr/mappings")
    }

    ant.delete(dir: "common/src/main/java/top/mcmtr/mappings")

    copy {
        outputs.upToDateWhen { false }
        from "checkouts/mtr-fabric.jar"
        into "fabric/run/mods"
    }

    copy {
        outputs.upToDateWhen { false }
        from "checkouts/mtr-forge.jar"
        into "forge/run/mods"
    }

    copy {
        outputs.upToDateWhen { false }
        from "common/src/main/latest-msd-addon.json"
        into "build/latest"
        filter(ReplaceTokens, tokens: ["version": rootProject.mod_version])
    }

    finalizedBy(setupLibrary)
}

allprojects {
    apply plugin: "architectury-plugin"

    version = minecraft_version + "-" + rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven { url = "https://jitpack.io/" }
        maven { url = "https://maven.terraformersmc.com/" }
        flatDir {
            dirs "../libs"
        }
    }

    afterEvaluate {
        for (def task in it.tasks) {
            if (task != rootProject.tasks.setupFiles) {
                task.dependsOn rootProject.tasks.setupFiles
            }
        }
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(minecraft_main_version == 16 ? 8 : minecraft_main_version == 17 ? 16 : 17))
    }
    withSourcesJar()
    withJavadocJar()
}

static String[] getModrinthData(String loader, String minecraftVersion, String projectId) {
    def versionsArray = getJson("https://api.modrinth.com/v2/project/" + projectId + "/version")
    for (def versionElement : versionsArray) {
        if (versionElement["loaders"].contains(loader) && versionElement["game_versions"].contains(minecraftVersion)) {
            return [versionElement["version_number"], versionElement["files"][0]["url"]]
        }
    }
    return ["", ""]
}

static Object getJson(String url) {
    int tries = 0
    while (true) {
        try {
            if (tries > 1) {
                System.out.println("Parsed ${url} after ${tries} tries")
            }
            return new JsonSlurper().parse(url.toURL())
        } catch (Exception ignored) {
            Thread.sleep(1000)
        }
    }
}