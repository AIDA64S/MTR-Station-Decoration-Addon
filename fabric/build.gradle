plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

task moveFabricBuilds() {
    doLast {
        delete fileTree("../build").matching {
            include "**/MTR-MSD-Addon-fabric*"
        }
        copy {
            from "build/libs"
            into "../build/release"
            exclude "*dev-shadow.jar"
            rename "(.+)", "MTR-MSD-Addon-\$1"
        }
        copy {
            from "../build/release"
            into "../build/latest"
            rename { fileName -> fileName.replace(rootProject.mod_version, "latest") }
        }
    }
}

afterEvaluate {
    for (def task in it.tasks) {
        if (task == tasks.build) {
            task.finalizedBy tasks.moveFabricBuilds
        }
    }
}
